import ddf.minim.*;
import ddf.minim.analysis.*;
import ddf.minim.effects.*;
import ddf.minim.signals.*;
import ddf.minim.spi.*;
import ddf.minim.ugens.*;

Minim minim;
AudioPlayer player;
AudioBuffer buffer;

float smoothedSample;
float lerpedAverage = 0;
float[] lerpedBuffer;

cube[] cubes = new cube[20];


SpinSpots spots;
SpinArm arm;

void setup() {
  size(512, 512);
  colorMode(HSB);
  minim  = new Minim(this);
  player = minim.loadFile("Hong Kong.mp3", width); 
  player.play ();
  buffer = player.mix;

  lerpedBuffer = new float[buffer.size()];

  arm = new SpinArm(width/2, height/2, 0.01);
  spots = new SpinSpots(width/2, height/2, -0.02, 90.0);

  for ( int i = 0; i < cubes.length; i++) {
    cubes[i]= new cube (random(15));
  }
}


void draw()
{
    background(0);
  for ( int i = 0; i < cubes.length; i++ )
  {
    cubes[i].ascend();
    cubes[i].display();
    cubes[i].top();
  }

  arm.update();
  arm.display();
  spots.update();
  spots.display();
}


//// NEW TAB

class Spin {
  float x, y, speed;
  float angle = 0.0;
  Spin(float xpos, float ypos, float s) {
    x = xpos;
    y = ypos;
    speed = s;
  }
  void update() {
    angle += speed;
  }
}

///NEW TAB


class SpinArm extends Spin {
  SpinArm(float x, float y, float s) 
  {
    super(x, y, s);
  }
  void display() 
  {
    {
      for (int i = 0; i < buffer.size(); i ++) 
      {
        pushMatrix();
        translate(x, y);
        float c = map(i, 0, buffer.size(), 0, 255); 
        stroke(c, 255, 255);
        float sample = buffer.get(i) * (height / 2); 
        smoothedSample = lerp(smoothedSample, sample, 0.001);
        angle += speed;
        rotate(angle);
        line(0 - smoothedSample, 0, 165, 0);
        popMatrix();
      }
    }
  }
}

//////new tab

class SpinSpots extends Spin
{
 float xPos;
  float dim;
  SpinSpots(float x, float y, float s, float d) {
    super(x, y, s);
    dim = d;
  }
  void display() 
  {
    {
      for (int i = 0; i < buffer.size(); i ++) 
      {

        pushMatrix();
        float c = map(i, 0, buffer.size(), 0, 255); 
        stroke(c, 255, 255);
        float sample = buffer.get(i) * (height / 2); 
        smoothedSample = lerp(smoothedSample, sample, 0.001);
        angle += speed;
        rotate(angle);
        ellipse(xPos- smoothedSample, sample, dim, dim);
        ellipse(xPos, 0, dim, dim);
        xPos++;
        popMatrix();
      }
    }
  }
}

////// new tab


class Square extends Shape {


  Square(float x_, float y_, float r_) {
    super(x_, y_, r_);
  }

  void display() {
    for (int i = 0; i < buffer.size(); i ++) 
    {
      float c = map(i, 0, buffer.size(), 0, 255); 
      float sample = buffer.get(i) * (height / 2);  // buffer[i]
      smoothedSample = lerp(smoothedSample, sample, 0.001);
      fill(c, 255, 255);
      rectMode(CENTER);
      ellipse(x + smoothedSample / sample, y, sample, r);
    }
  }
}





